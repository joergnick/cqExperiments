#import numpy as np
#import bempp.api
#import math
#from RKconv_op import *
import bempp.api
import numpy as np
import math
#from RKconv_op import *
import sys
sys.path.append('cqToolbox')
sys.path.append('../cqToolbox')
sys.path.append('data')
sys.path.append('../data')
sys.path.append('..')
from linearcq import Conv_Operator
from rml_main import density2evals
import math

import time

## Initialize points in domain
am_p = 100
points = np.array([np.zeros(am_p),0.5*np.ones(am_p),np.linspace(0,1,am_p)])

## Load reference solution
N_ref=2096
T=8
h_ref = 2**(-4)
m = 2
filename = 'data/rml_densities_h_'+str(np.round(h_ref,3)) +'_N_'+str(N_ref)+'_m_'+str(m)+ '.npy'
ref_sol = density2evals(h_ref,N_ref,T,m,points,filename) ## (Stages are dropped)

print(ref_sol.shape())
#######################################
###############
am_space = 6
am_time  = 6
diffs = np.zeros(am_time)
norms_direct = np.zeros(am_time)
diffs_direct = np.zeros(am_time)
m = 2
T = 8
for space_index in range(am_space):
    for time_index in range(am_time):
        h   = 2**(-(space_index+0)*1.0/2)
        N   = int(np.round(8*2**time_index))
        tau = T*1.0/N
        filename = 'data/rml_densities_h_'+str(np.round(h,3)) +'_N_'+str(N)+'_m_'+str(m)+ '.npy'
        num_sol = density2evals(h,N,T,m,points,filename)
        #import matplotlib.pyplot as plt
        #plt.plot(np.linalg.norm(num_sol,axis=1))
        #plt.show()
 
